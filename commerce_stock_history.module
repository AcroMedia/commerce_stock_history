<?php

/**
 * @file
 * Hooks and utility functions for Commerce Stock History.
 */

/**
 * Implements hook_menu().
 */
function commerce_stock_history_menu() {
  // @TODO: Is this necesary or can we use a view?
  $items['admin/commerce/products/%commerce_product/stock-history'] = array(
    'title' => 'Stock history',
    'page callback' => 'commerce_stock_history_view_page',
    'access arguments' => array('access content'),
    'file path' => drupal_get_path('module', 'commerce_stock_history') . '/includes',
    'file' => 'commerce_stock_history.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );
}

/**
 * Implements hook_permission().
 */
function commerce_stock_history_permission() {
  return array(
    'view commerce stock history' => array(
      'title' => t('View stock history'),
    ),
  );
}

/**
 * Implements hook_views_api().
 */
function commerce_stock_history_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'commerce_stock_history') . '/includes/views',
  );
}

/**
 * Implements hook_entity_info().
 */
function commerce_stock_history_entity_info() {
  $info = array();

  $info['commerce_stock_history'] = array(
    'label' => t('Stock history'),
    'base table' => 'commerce_stock_history',
    'entity keys' => array(
      'id' => 'id',
      'label' => 'message',
    ),
    'module' => 'commerce_stock_history',
    'entity class' => 'Entity',
    'controller class' => 'EntityAPIController',
    'views controller class' => 'EntityDefaultViewsController',
  );

  return $info;
}

/**
 * Implements hook_entity_property_info_alter().
 */
function commerce_stock_history_entity_property_info_alter(&$info) {
  foreach ($info['commerce_stock_history']['properties'] as $field => &$info) {
    $info['setter callback'] = 'entity_property_verbatim_set';
  }
}

/**
 * Creates a new stock history entity.
 *
 * @param string $message
 *   The entry's message.
 * @param object $product
 *   The product the entry is for.
 * @param int $quantity
 *   The quantity the stock is being adjusted by.
 * @param int $uid
 *   The ID of the user making the stock adjustment.
 *
 * @return bool
 */
function commerce_stock_history_create_entry($message, $product, $quantity, $uid) {
  $stock_history_entry = entity_create('commerce_stock_history', array(
    'message' => $message,
    'product_id' => $product->product_id,
    'quantity' => $quantity,
    'uid' => $uid,
  ));
  entity_save('commerce_stock_history', $stock_history_entry);
  return $stock_history_entry;
}
